#include "stdafx.h"
#include "IdentitySphere.h"
#include <algorithm>

namespace
{

struct CSphereTesselator : SMeshDataP3NT2
{
public:
    static const unsigned MIN_PRECISION = 4;

    void Tesselate(unsigned slices, unsigned stacks)
    {
        assert((slices >= MIN_PRECISION) && (stacks >= MIN_PRECISION));
        MakeVertexAttributes(slices, stacks);
        MakeTriangleStripIndicies(slices, stacks);
    }

private:
    void MakeVertexAttributes(unsigned columnCount, unsigned rowCount)
    {
        // –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤–µ—Ä—à–∏–Ω.
        for (unsigned ci = 0; ci < columnCount; ++ci)
        {
            const float u = float(ci) / float(columnCount - 1);
            for (unsigned ri = 0; ri < rowCount; ++ri)
            {
                const float v = float(ri) / float(rowCount - 1);

                SVertexP3NT2 vertex;
                vertex.position = GetPositionOnSphere(u, v);

                // –ù–æ—Ä–º–∞–ª—å –∫ —Å—Ñ–µ—Ä–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä —Ä–∞–¥–∏—É—Å–∞ –∫ –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
                // –ü–æ—Å–∫–æ–ª—å–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ —Ä–∞–≤–Ω—ã 0, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞
                // –±—É–¥—É—Ç —Ä–∞–≤–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –≤–µ—Ä—à–∏–Ω—ã.
                // –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ä–∞–¥–∏—É—Å—É, —Ä–∞–≤–Ω–æ–º—É 1, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
                vertex.normal = vertex.position;

                // –û–±–µ —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–ª–∞–≤–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å—Å—è –æ—Ç 0 –¥–æ 1,
                // –Ω–∞—Ç—è–≥–∏–≤–∞—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ —Ç–µ–ª–æ –≤—Ä–∞—â–µ–Ω–∏—è.
                // –ü—Ä–∏ UV-–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –±—É–¥—É—Ç u –∏ v.
                vertex.texCoord = {1.f - u, v};

                vertices.push_back(vertex);
            }
        }
    }

    void MakeTriangleStripIndicies(unsigned columnCount, unsigned rowCount)
    {
        indicies.clear();
        indicies.reserve((columnCount - 1) * rowCount * 2);
        // –≤—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤–µ—Ä—à–∏–Ω.
        for (unsigned ci = 0; ci < columnCount - 1; ++ci)
        {
            if (ci % 2 == 0)
            {
                for (unsigned ri = 0; ri < rowCount; ++ri)
                {
                    unsigned index = ci * rowCount + ri;
                    indicies.push_back(index + rowCount);
                    indicies.push_back(index);
                }
            }
            else
            {
                for (unsigned ri = rowCount - 1; ri < rowCount; --ri)
                {
                    unsigned index = ci * rowCount + ri;
                    indicies.push_back(index);
                    indicies.push_back(index + rowCount);
                }
            }
        }
    }

    glm::vec3 GetPositionOnSphere(float u, float v)const
    {
        const float radius = 1.f;
        const float latitude = float(M_PI) * (1.f - v); // ùùÖ‚àô(ùüé.ùüì-ùíó)
        const float longitude = float(2.0 * M_PI) * u; // ùüêùùÖ‚àôùíñ
        const float latitudeRadius = radius * sinf(latitude);

        return { cosf(longitude) * latitudeRadius,
                 cosf(latitude) * radius,
                 sinf(longitude) * latitudeRadius };
    }
};
}

CIdentitySphere::CIdentitySphere(unsigned slices, unsigned stacks)
    : m_mesh(MeshType::TriangleStrip)
{
    CSphereTesselator tesselator;
    tesselator.Tesselate(slices, stacks);
    m_mesh.Copy(tesselator);
}

void CIdentitySphere::Draw(IRenderer3D &renderer) const
{
    m_mesh.Draw(renderer);
}
