#include "stdafx.h"
#include "IdentitySphere.h"
#include <algorithm>

namespace
{
const unsigned MIN_PRECISION = 4;

void CalculateTriangleStripIndicies(std::vector<uint32_t> &indicies,
                                    unsigned columnCount, unsigned rowCount)
{
    indicies.clear();
    indicies.reserve((columnCount - 1) * rowCount * 2);
    // –≤—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤–µ—Ä—à–∏–Ω.
    for (unsigned ci = 0; ci < columnCount - 1; ++ci)
    {
        if (ci % 2 == 0)
        {
            for (unsigned ri = 0; ri < rowCount; ++ri)
            {
                unsigned index = ci * rowCount + ri;
                indicies.push_back(index + rowCount);
                indicies.push_back(index);
            }
        }
        else
        {
            for (unsigned ri = rowCount - 1; ri < rowCount; --ri)
            {
                unsigned index = ci * rowCount + ri;
                indicies.push_back(index);
                indicies.push_back(index + rowCount);
            }
        }
    }
}

/// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –≤–µ—Ä—à–∏–Ω—ã –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é OpenGL,
/// –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç 'callback'.
template <class T>
void DoWithBindedArrays(const std::vector<SVertexP3NT2> &vertices, T && callback)
{
    // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º vertex array –∏ normal array.
    glEnableClientState(GL_TEXTURE_COORD_ARRAY);
    glEnableClientState(GL_VERTEX_ARRAY);
    glEnableClientState(GL_NORMAL_ARRAY);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É vertex array –∏ normal array
    const size_t stride = sizeof(SVertexP3NT2);
    glNormalPointer(GL_FLOAT, stride, glm::value_ptr(vertices[0].normal));
    glVertexPointer(3, GL_FLOAT, stride, glm::value_ptr(vertices[0].position));
    glTexCoordPointer(2, GL_FLOAT, stride, glm::value_ptr(vertices[0].texCoord));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–Ω–µ—à–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é.
    callback();

    // –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º vertex array –∏ normal array.
    glDisableClientState(GL_TEXTURE_COORD_ARRAY);
    glDisableClientState(GL_VERTEX_ARRAY);
    glDisableClientState(GL_NORMAL_ARRAY);
}

glm::vec3 GetPositionOnSphere(float u, float v)
{
    const float radius = 1.f;
    const float latitude = float(M_PI) * (1.f - v); // ùùÖ‚àô(ùüé.ùüì-ùíó)
    const float longitude = float(2.0 * M_PI) * u; // ùüêùùÖ‚àôùíñ
    const float latitudeRadius = radius * sinf(latitude);

    return { cosf(longitude) * latitudeRadius,
             cosf(latitude) * radius,
             sinf(longitude) * latitudeRadius };
}
}

CIdentitySphere::CIdentitySphere(unsigned slices, unsigned stacks)
{
    Tesselate(slices, stacks);
}

void CIdentitySphere::Draw() const
{
    DoWithBindedArrays(m_vertices, [this] {
        glDrawElements(GL_TRIANGLE_STRIP, GLsizei(m_indicies.size()),
                       GL_UNSIGNED_INT, m_indicies.data());
    });
}

void CIdentitySphere::Tesselate(unsigned slices, unsigned stacks)
{
    assert((slices >= MIN_PRECISION) && (stacks >= MIN_PRECISION));
    m_vertices.reserve(slices * stacks);
    // –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤–µ—Ä—à–∏–Ω.
    for (unsigned ci = 0; ci < slices; ++ci)
    {
        const float u = float(ci) / float(slices - 1);
        for (unsigned ri = 0; ri < stacks; ++ri)
        {
            const float v = float(ri) / float(stacks - 1);

            SVertexP3NT2 vertex;
            vertex.position = GetPositionOnSphere(u, v);

            // –ù–æ—Ä–º–∞–ª—å –∫ —Å—Ñ–µ—Ä–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä —Ä–∞–¥–∏—É—Å–∞ –∫ –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
            // –ü–æ—Å–∫–æ–ª—å–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ —Ä–∞–≤–Ω—ã 0, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞
            // –±—É–¥—É—Ç —Ä–∞–≤–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –≤–µ—Ä—à–∏–Ω—ã.
            // –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ä–∞–¥–∏—É—Å—É, —Ä–∞–≤–Ω–æ–º—É 1, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
            vertex.normal = vertex.position;

            // –û–±–µ —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–ª–∞–≤–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å—Å—è –æ—Ç 0 –¥–æ 1,
            // –Ω–∞—Ç—è–≥–∏–≤–∞—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ —Ç–µ–ª–æ –≤—Ä–∞—â–µ–Ω–∏—è.
            // –ü—Ä–∏ UV-–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –±—É–¥—É—Ç u –∏ v.
            vertex.texCoord = {1.f - u, v};

            m_vertices.push_back(vertex);
        }
    }

    CalculateTriangleStripIndicies(m_indicies, slices, stacks);
}
